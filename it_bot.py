from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
import logging, asyncio 
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)


start_buttons = [
    [types.KeyboardButton(text='–ö—É—Ä—Å—ã'), types.KeyboardButton(text='–û –Ω–∞—Å')],
    [types.KeyboardButton(text='–ê–¥—Ä–µ—Å'), types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã')]
]
start_keyboard = types.ReplyKeyboardMarkup(keyboard=start_buttons, resize_keyboard=True)



course_button = [
    [types.KeyboardButton(text='Backend'), types.KeyboardButton(text='Frontend')],
    [types.KeyboardButton(text='Android'), types.KeyboardButton(text='UX/UI')],
    [types.KeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'), types.KeyboardButton(text='–ù–∞–∑–∞–¥')]
]
course_keyboard = types.ReplyKeyboardMarkup(keyboard=course_button, resize_keyboard=True)

@dp.message(Command("start"))
async def start(message:Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ {message.from_user.full_name}",
    reply_markup=start_keyboard)

@dp.message(F.text == '–û –Ω–∞—Å')
async def about_us(message:Message):
    await message.reply("Geeks - —ç—Ç–æ it –∫—É—Ä—Å—ã –≤ –û—à–µ, –ö–∞—Ä–∞-–ë–∞–ª—Ç–µ, –ë–∏—à–∫–µ–∫–µ –∏ –¢–∞—à–∫–µ–Ω—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –≤ 2018–≥")

@dp.message(F.text == '–ê–¥—Ä–µ—Å')
async def location(message:Message):
    await message.reply_location(latitude=40.51931846586533, longitude=72.80297788183063)

@dp.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contact(message:Message):
    await message.reply_contact(phone_number="+996500182663", first_name="Detective", last_name="Mills")

@dp.message(F.text == '–ö—É—Ä—Å—ã')
async def course(message:Message):
    await message.reply("–í–æ—Ç –Ω–∞—à–∏ –∫—É—Ä—Å—ã:", reply_markup=course_keyboard)

@dp.message(F.text == 'Backend')
async def backend(message:Message):
    await message.reply("Backend ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É. –í–∞–∂–Ω–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç—É backend, –Ω–æ –æ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

@dp.message(F.text == 'Frontend')
async def frontend(message:Message):
    await message.reply("Frontend ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å—ë, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏. Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å backend, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.")

@dp.message(F.text == 'Android')
async def android(message:Message):
    await message.reply("Android-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚Äî —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Android. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —è–∑—ã–∫–∏ Java –∏–ª–∏ Kotlin –∏ —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Android Studio. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å API –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")

@dp.message(F.text == 'UX/UI')
async def ux_ui(message:Message):
    await message.reply("UX/UI ‚Äî –¥–∏–∑–∞–π–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω—ã—Ö –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. UX (User Experience) —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, —Ç–æ–≥–¥–∞ –∫–∞–∫ UI (User Interface) —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∏ –¥–∏–∑–∞–π–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –¶–µ–ª—å UX/UI-–¥–∏–∑–∞–π–Ω–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message:Message):
    await message.answer("üîô", reply_markup=start_keyboard)

@dp.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def application(message:Message):
    buutton = [[types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', request_contact=True)]]
    keyboarf = types.ReplyKeyboardMarkup(keyboard=buutton, resize_keyboard=True)
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=keyboarf)

@dp.message(F.contact)
async def get_contact(message:Message):
    contact_info = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å—ã \n–ò–º—è: {message.contact.first_name}\n–§–∞–º–∏–ª–∏—è: {message.contact.last_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}"
    await bot.send_message(chat_id = -4255458461, text = contact_info)
    await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É")
    await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=start_keyboard)
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


